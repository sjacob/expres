// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.application.web;

import au.gov.nla.expres.application.web.TreatementItemsCollectionThymeleafController;
import au.gov.nla.expres.application.web.TreatementItemsCollectionThymeleafLinkFactory;
import au.gov.nla.expres.application.web.TreatementItemsItemTreatmentsThymeleafController;
import au.gov.nla.expres.model.TreatementItem;
import au.gov.nla.expres.model.Treatment;
import au.gov.nla.expres.service.api.TreatementItemService;
import au.gov.nla.expres.service.api.TreatmentService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect TreatementItemsItemTreatmentsThymeleafController_Roo_Thymeleaf {
    
    declare @type: TreatementItemsItemTreatmentsThymeleafController: @Controller;
    
    declare @type: TreatementItemsItemTreatmentsThymeleafController: @RequestMapping(value = "/treatementitems/{treatementItem}/treatments", name = "TreatementItemsItemTreatmentsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource TreatementItemsItemTreatmentsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<TreatementItemsCollectionThymeleafController> TreatementItemsItemTreatmentsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService TreatementItemsItemTreatmentsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param treatementItemService
     * @param treatmentService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public TreatementItemsItemTreatmentsThymeleafController.new(TreatementItemService treatementItemService, TreatmentService treatmentService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setTreatementItemService(treatementItemService);
        setTreatmentService(treatmentService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(TreatementItemsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource TreatementItemsItemTreatmentsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void TreatementItemsItemTreatmentsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<TreatementItemsCollectionThymeleafController> TreatementItemsItemTreatmentsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void TreatementItemsItemTreatmentsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<TreatementItemsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService TreatementItemsItemTreatmentsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void TreatementItemsItemTreatmentsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return TreatementItem
     */
    @ModelAttribute
    public TreatementItem TreatementItemsItemTreatmentsThymeleafController.getTreatementItem(@PathVariable("treatementItem") Long id, Locale locale, HttpMethod method) {
        TreatementItem treatementItem = null;
        if (HttpMethod.PUT.equals(method)) {
            treatementItem = treatementItemService.findOneForUpdate(id);
        } else {
            treatementItem = treatementItemService.findOne(id);
        }
        
        if (treatementItem == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"TreatementItem", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return treatementItem;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void TreatementItemsItemTreatmentsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void TreatementItemsItemTreatmentsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tItem
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Treatment>> TreatementItemsItemTreatmentsThymeleafController.datatables(@ModelAttribute TreatementItem tItem, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Treatment> treatments = getTreatmentService().findByTItem(tItem, search, pageable);
        long totalTreatmentsCount = getTreatmentService().countByTItem(tItem);
        ConvertedDatatablesData<Treatment> data =  new ConvertedDatatablesData<Treatment>(treatments, totalTreatmentsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Treatment>> TreatementItemsItemTreatmentsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Treatment> treatments = getTreatmentService().findAllByIdsIn(ids, search, pageable);
        long totalTreatmentsCount = treatments.getTotalElements();
        ConvertedDatatablesData<Treatment> data =  new ConvertedDatatablesData<Treatment>(treatments, totalTreatmentsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param treatementItem
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView TreatementItemsItemTreatmentsThymeleafController.createForm(@ModelAttribute TreatementItem treatementItem, Model model) {
        populateForm(model);
        model.addAttribute("treatment", new Treatment());
        return new ModelAndView("treatementitems/treatments/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param treatementItem
     * @param treatmentsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromTreatments", value = "/{treatmentsToRemove}")
    @ResponseBody
    public ResponseEntity<?> TreatementItemsItemTreatmentsThymeleafController.removeFromTreatments(@ModelAttribute TreatementItem treatementItem, @PathVariable("treatmentsToRemove") Long treatmentsToRemove) {
        getTreatementItemService().removeFromTreatments(treatementItem,Collections.singleton(treatmentsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param treatementItem
     * @param treatmentsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromTreatmentsBatch", value = "/batch/{treatmentsToRemove}")
    @ResponseBody
    public ResponseEntity<?> TreatementItemsItemTreatmentsThymeleafController.removeFromTreatmentsBatch(@ModelAttribute TreatementItem treatementItem, @PathVariable("treatmentsToRemove") Collection<Long> treatmentsToRemove) {
        getTreatementItemService().removeFromTreatments(treatementItem, treatmentsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param treatementItem
     * @param treatments
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView TreatementItemsItemTreatmentsThymeleafController.create(@ModelAttribute TreatementItem treatementItem, @RequestParam(value = "treatmentsIds", required = false) List<Long> treatments, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (treatments != null) {
            for (Iterator<Long> iterator = treatments.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != treatementItem.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (treatments != null) {
                treatementItem.setTreatments(new HashSet<Treatment>(getTreatmentService().findAll(treatments)));
            }else{
                treatementItem.setTreatments(new HashSet<Treatment>());
            }
            // Reset the version to prevent update
             treatementItem.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("treatementItem", treatementItem);
            model.addAttribute("concurrency", true);
            return new ModelAndView("treatementitems/treatments/create");
        }else if(version != treatementItem.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("treatementItem", treatementItem);
            model.addAttribute("concurrency", false);
            return new ModelAndView("treatementitems/treatments/create");
        }
        getTreatementItemService().setTreatments(treatementItem,treatments);
        return new ModelAndView("redirect:" + getCollectionLink().to(TreatementItemsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
