// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.Movement;
import au.gov.nla.expres.repository.MovementRepository;
import au.gov.nla.expres.service.impl.MovementServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect MovementServiceImpl_Roo_Service_Impl {
    
    declare @type: MovementServiceImpl: @Service;
    
    declare @type: MovementServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MovementRepository MovementServiceImpl.movementRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param movementRepository
     */
    @Autowired
    public MovementServiceImpl.new(MovementRepository movementRepository) {
        setMovementRepository(movementRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MovementRepository
     */
    public MovementRepository MovementServiceImpl.getMovementRepository() {
        return movementRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param movementRepository
     */
    public void MovementServiceImpl.setMovementRepository(MovementRepository movementRepository) {
        this.movementRepository = movementRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param movement
     */
    @Transactional
    public void MovementServiceImpl.delete(Movement movement) {
        // Clear bidirectional many-to-one child relationship with CollectionItem
        if (movement.getMItem() != null) {
            movement.getMItem().getMovements().remove(movement);
        }
        
        getMovementRepository().delete(movement);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Movement> MovementServiceImpl.save(Iterable<Movement> entities) {
        return getMovementRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void MovementServiceImpl.delete(Iterable<Long> ids) {
        List<Movement> toDelete = getMovementRepository().findAll(ids);
        getMovementRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Movement
     */
    @Transactional
    public Movement MovementServiceImpl.save(Movement entity) {
        return getMovementRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Movement
     */
    public Movement MovementServiceImpl.findOne(Long id) {
        return getMovementRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Movement
     */
    public Movement MovementServiceImpl.findOneForUpdate(Long id) {
        return getMovementRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Movement> MovementServiceImpl.findAll(Iterable<Long> ids) {
        return getMovementRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Movement> MovementServiceImpl.findAll() {
        return getMovementRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long MovementServiceImpl.count() {
        return getMovementRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getMovementRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getMovementRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementServiceImpl.findByMItem(CollectionItem mItem, GlobalSearch globalSearch, Pageable pageable) {
        return getMovementRepository().findByMItem(mItem, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mItem
     * @return Long
     */
    public long MovementServiceImpl.countByMItem(CollectionItem mItem) {
        return getMovementRepository().countByMItem(mItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Movement> MovementServiceImpl.getEntityType() {
        return Movement.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> MovementServiceImpl.getIdType() {
        return Long.class;
    }
    
}
