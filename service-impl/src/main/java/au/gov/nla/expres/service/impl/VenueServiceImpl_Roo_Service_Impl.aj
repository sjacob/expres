// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.Venue;
import au.gov.nla.expres.repository.VenueRepository;
import au.gov.nla.expres.service.impl.VenueServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect VenueServiceImpl_Roo_Service_Impl {
    
    declare @type: VenueServiceImpl: @Service;
    
    declare @type: VenueServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private VenueRepository VenueServiceImpl.venueRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param venueRepository
     */
    @Autowired
    public VenueServiceImpl.new(VenueRepository venueRepository) {
        setVenueRepository(venueRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return VenueRepository
     */
    public VenueRepository VenueServiceImpl.getVenueRepository() {
        return venueRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venueRepository
     */
    public void VenueServiceImpl.setVenueRepository(VenueRepository venueRepository) {
        this.venueRepository = venueRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venue
     */
    @Transactional
    public void VenueServiceImpl.delete(Venue venue) {
        // Clear bidirectional many-to-one child relationship with Contact
        if (venue.getVenueContact() != null) {
            venue.getVenueContact().getVenues().remove(venue);
        }
        
        getVenueRepository().delete(venue);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Venue> VenueServiceImpl.save(Iterable<Venue> entities) {
        return getVenueRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void VenueServiceImpl.delete(Iterable<Long> ids) {
        List<Venue> toDelete = getVenueRepository().findAll(ids);
        getVenueRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Venue
     */
    @Transactional
    public Venue VenueServiceImpl.save(Venue entity) {
        return getVenueRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Venue
     */
    public Venue VenueServiceImpl.findOne(Long id) {
        return getVenueRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Venue
     */
    public Venue VenueServiceImpl.findOneForUpdate(Long id) {
        return getVenueRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Venue> VenueServiceImpl.findAll(Iterable<Long> ids) {
        return getVenueRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Venue> VenueServiceImpl.findAll() {
        return getVenueRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long VenueServiceImpl.count() {
        return getVenueRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getVenueRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getVenueRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venueContact
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueServiceImpl.findByVenueContact(Contact venueContact, GlobalSearch globalSearch, Pageable pageable) {
        return getVenueRepository().findByVenueContact(venueContact, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venueContact
     * @return Long
     */
    public long VenueServiceImpl.countByVenueContact(Contact venueContact) {
        return getVenueRepository().countByVenueContact(venueContact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Venue> VenueServiceImpl.getEntityType() {
        return Venue.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> VenueServiceImpl.getIdType() {
        return Long.class;
    }
    
}
