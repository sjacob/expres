// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.Exhibition;
import au.gov.nla.expres.model.ExhibitionItem;
import au.gov.nla.expres.model.PageOpening;
import au.gov.nla.expres.repository.ExhibitionItemRepository;
import au.gov.nla.expres.service.api.PageOpeningService;
import au.gov.nla.expres.service.impl.ExhibitionItemServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ExhibitionItemServiceImpl_Roo_Service_Impl {
    
    declare @type: ExhibitionItemServiceImpl: @Service;
    
    declare @type: ExhibitionItemServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ExhibitionItemRepository ExhibitionItemServiceImpl.exhibitionItemRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private PageOpeningService ExhibitionItemServiceImpl.pageOpeningService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param exhibitionItemRepository
     * @param pageOpeningService
     */
    @Autowired
    public ExhibitionItemServiceImpl.new(ExhibitionItemRepository exhibitionItemRepository, @Lazy PageOpeningService pageOpeningService) {
        setExhibitionItemRepository(exhibitionItemRepository);
        setPageOpeningService(pageOpeningService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ExhibitionItemRepository
     */
    public ExhibitionItemRepository ExhibitionItemServiceImpl.getExhibitionItemRepository() {
        return exhibitionItemRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItemRepository
     */
    public void ExhibitionItemServiceImpl.setExhibitionItemRepository(ExhibitionItemRepository exhibitionItemRepository) {
        this.exhibitionItemRepository = exhibitionItemRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return PageOpeningService
     */
    public PageOpeningService ExhibitionItemServiceImpl.getPageOpeningService() {
        return pageOpeningService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param pageOpeningService
     */
    public void ExhibitionItemServiceImpl.setPageOpeningService(PageOpeningService pageOpeningService) {
        this.pageOpeningService = pageOpeningService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpeningsToAdd
     * @return ExhibitionItem
     */
    @Transactional
    public ExhibitionItem ExhibitionItemServiceImpl.addToPageOpenings(ExhibitionItem exhibitionItem, Iterable<Long> pageOpeningsToAdd) {
        List<PageOpening> pageOpenings = getPageOpeningService().findAll(pageOpeningsToAdd);
        exhibitionItem.addToPageOpenings(pageOpenings);
        return getExhibitionItemRepository().save(exhibitionItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpeningsToRemove
     * @return ExhibitionItem
     */
    @Transactional
    public ExhibitionItem ExhibitionItemServiceImpl.removeFromPageOpenings(ExhibitionItem exhibitionItem, Iterable<Long> pageOpeningsToRemove) {
        List<PageOpening> pageOpenings = getPageOpeningService().findAll(pageOpeningsToRemove);
        exhibitionItem.removeFromPageOpenings(pageOpenings);
        return getExhibitionItemRepository().save(exhibitionItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpenings
     * @return ExhibitionItem
     */
    @Transactional
    public ExhibitionItem ExhibitionItemServiceImpl.setPageOpenings(ExhibitionItem exhibitionItem, Iterable<Long> pageOpenings) {
        List<PageOpening> items = getPageOpeningService().findAll(pageOpenings);
        Set<PageOpening> currents = exhibitionItem.getPageOpenings();
        Set<PageOpening> toRemove = new HashSet<PageOpening>();
        for (Iterator<PageOpening> iterator = currents.iterator(); iterator.hasNext();) {
            PageOpening nextPageOpening = iterator.next();
            if (items.contains(nextPageOpening)) {
                items.remove(nextPageOpening);
            } else {
                toRemove.add(nextPageOpening);
            }
        }
        exhibitionItem.removeFromPageOpenings(toRemove);
        exhibitionItem.addToPageOpenings(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        exhibitionItem.setVersion(exhibitionItem.getVersion() + 1);
        return getExhibitionItemRepository().save(exhibitionItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     */
    @Transactional
    public void ExhibitionItemServiceImpl.delete(ExhibitionItem exhibitionItem) {
        // Clear bidirectional many-to-one child relationship with Exhibition
        if (exhibitionItem.getExhibition() != null) {
            exhibitionItem.getExhibition().getExhibitionItems().remove(exhibitionItem);
        }
        
        // Clear bidirectional many-to-one child relationship with CollectionItem
        if (exhibitionItem.getEItem() != null) {
            exhibitionItem.getEItem().getExhibitions().remove(exhibitionItem);
        }
        
        // Clear bidirectional one-to-many parent relationship with PageOpening
        for (PageOpening item : exhibitionItem.getPageOpenings()) {
            item.setExhibitionItem(null);
        }
        
        getExhibitionItemRepository().delete(exhibitionItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<ExhibitionItem> ExhibitionItemServiceImpl.save(Iterable<ExhibitionItem> entities) {
        return getExhibitionItemRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ExhibitionItemServiceImpl.delete(Iterable<Long> ids) {
        List<ExhibitionItem> toDelete = getExhibitionItemRepository().findAll(ids);
        getExhibitionItemRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return ExhibitionItem
     */
    @Transactional
    public ExhibitionItem ExhibitionItemServiceImpl.save(ExhibitionItem entity) {
        return getExhibitionItemRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ExhibitionItem
     */
    public ExhibitionItem ExhibitionItemServiceImpl.findOne(Long id) {
        return getExhibitionItemRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ExhibitionItem
     */
    public ExhibitionItem ExhibitionItemServiceImpl.findOneForUpdate(Long id) {
        return getExhibitionItemRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<ExhibitionItem> ExhibitionItemServiceImpl.findAll(Iterable<Long> ids) {
        return getExhibitionItemRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<ExhibitionItem> ExhibitionItemServiceImpl.findAll() {
        return getExhibitionItemRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ExhibitionItemServiceImpl.count() {
        return getExhibitionItemRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExhibitionItem> ExhibitionItemServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionItemRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExhibitionItem> ExhibitionItemServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionItemRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param eItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExhibitionItem> ExhibitionItemServiceImpl.findByEItem(CollectionItem eItem, GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionItemRepository().findByEItem(eItem, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ExhibitionItem> ExhibitionItemServiceImpl.findByExhibition(Exhibition exhibition, GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionItemRepository().findByExhibition(exhibition, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param eItem
     * @return Long
     */
    public long ExhibitionItemServiceImpl.countByEItem(CollectionItem eItem) {
        return getExhibitionItemRepository().countByEItem(eItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @return Long
     */
    public long ExhibitionItemServiceImpl.countByExhibition(Exhibition exhibition) {
        return getExhibitionItemRepository().countByExhibition(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<ExhibitionItem> ExhibitionItemServiceImpl.getEntityType() {
        return ExhibitionItem.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ExhibitionItemServiceImpl.getIdType() {
        return Long.class;
    }
    
}
