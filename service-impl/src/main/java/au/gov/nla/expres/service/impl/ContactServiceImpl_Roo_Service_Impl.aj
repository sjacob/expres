// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.Loan;
import au.gov.nla.expres.model.Venue;
import au.gov.nla.expres.repository.ContactRepository;
import au.gov.nla.expres.service.api.LoanService;
import au.gov.nla.expres.service.api.VenueService;
import au.gov.nla.expres.service.impl.ContactServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ContactServiceImpl_Roo_Service_Impl {
    
    declare @type: ContactServiceImpl: @Service;
    
    declare @type: ContactServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ContactRepository ContactServiceImpl.contactRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LoanService ContactServiceImpl.loanService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private VenueService ContactServiceImpl.venueService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param contactRepository
     * @param loanService
     * @param venueService
     */
    @Autowired
    public ContactServiceImpl.new(ContactRepository contactRepository, @Lazy LoanService loanService, @Lazy VenueService venueService) {
        setContactRepository(contactRepository);
        setLoanService(loanService);
        setVenueService(venueService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ContactRepository
     */
    public ContactRepository ContactServiceImpl.getContactRepository() {
        return contactRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contactRepository
     */
    public void ContactServiceImpl.setContactRepository(ContactRepository contactRepository) {
        this.contactRepository = contactRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return LoanService
     */
    public LoanService ContactServiceImpl.getLoanService() {
        return loanService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanService
     */
    public void ContactServiceImpl.setLoanService(LoanService loanService) {
        this.loanService = loanService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return VenueService
     */
    public VenueService ContactServiceImpl.getVenueService() {
        return venueService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venueService
     */
    public void ContactServiceImpl.setVenueService(VenueService venueService) {
        this.venueService = venueService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loansToAdd
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.addToLoans(Contact contact, Iterable<Long> loansToAdd) {
        List<Loan> loans = getLoanService().findAll(loansToAdd);
        contact.addToLoans(loans);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param venuesToAdd
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.addToVenues(Contact contact, Iterable<Long> venuesToAdd) {
        List<Venue> venues = getVenueService().findAll(venuesToAdd);
        contact.addToVenues(venues);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loansToRemove
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.removeFromLoans(Contact contact, Iterable<Long> loansToRemove) {
        List<Loan> loans = getLoanService().findAll(loansToRemove);
        contact.removeFromLoans(loans);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param venuesToRemove
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.removeFromVenues(Contact contact, Iterable<Long> venuesToRemove) {
        List<Venue> venues = getVenueService().findAll(venuesToRemove);
        contact.removeFromVenues(venues);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loans
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.setLoans(Contact contact, Iterable<Long> loans) {
        List<Loan> items = getLoanService().findAll(loans);
        Set<Loan> currents = contact.getLoans();
        Set<Loan> toRemove = new HashSet<Loan>();
        for (Iterator<Loan> iterator = currents.iterator(); iterator.hasNext();) {
            Loan nextLoan = iterator.next();
            if (items.contains(nextLoan)) {
                items.remove(nextLoan);
            } else {
                toRemove.add(nextLoan);
            }
        }
        contact.removeFromLoans(toRemove);
        contact.addToLoans(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        contact.setVersion(contact.getVersion() + 1);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param venues
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.setVenues(Contact contact, Iterable<Long> venues) {
        List<Venue> items = getVenueService().findAll(venues);
        Set<Venue> currents = contact.getVenues();
        Set<Venue> toRemove = new HashSet<Venue>();
        for (Iterator<Venue> iterator = currents.iterator(); iterator.hasNext();) {
            Venue nextVenue = iterator.next();
            if (items.contains(nextVenue)) {
                items.remove(nextVenue);
            } else {
                toRemove.add(nextVenue);
            }
        }
        contact.removeFromVenues(toRemove);
        contact.addToVenues(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        contact.setVersion(contact.getVersion() + 1);
        return getContactRepository().save(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     */
    @Transactional
    public void ContactServiceImpl.delete(Contact contact) {
        // Clear bidirectional one-to-many parent relationship with Loan
        for (Loan item : contact.getLoans()) {
            item.setLoanContact(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with Venue
        for (Venue item : contact.getVenues()) {
            item.setVenueContact(null);
        }
        
        getContactRepository().delete(contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Contact> ContactServiceImpl.save(Iterable<Contact> entities) {
        return getContactRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ContactServiceImpl.delete(Iterable<Long> ids) {
        List<Contact> toDelete = getContactRepository().findAll(ids);
        getContactRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Contact
     */
    @Transactional
    public Contact ContactServiceImpl.save(Contact entity) {
        return getContactRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Contact
     */
    public Contact ContactServiceImpl.findOne(Long id) {
        return getContactRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Contact
     */
    public Contact ContactServiceImpl.findOneForUpdate(Long id) {
        return getContactRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Contact> ContactServiceImpl.findAll(Iterable<Long> ids) {
        return getContactRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Contact> ContactServiceImpl.findAll() {
        return getContactRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ContactServiceImpl.count() {
        return getContactRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contact> ContactServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getContactRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contact> ContactServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getContactRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Contact> ContactServiceImpl.getEntityType() {
        return Contact.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ContactServiceImpl.getIdType() {
        return Long.class;
    }
    
}
