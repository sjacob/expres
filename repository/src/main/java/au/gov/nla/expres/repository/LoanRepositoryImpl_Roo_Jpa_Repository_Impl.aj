// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.Loan;
import au.gov.nla.expres.model.QLoan;
import au.gov.nla.expres.repository.LoanRepositoryCustom;
import au.gov.nla.expres.repository.LoanRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect LoanRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: LoanRepositoryImpl implements LoanRepositoryCustom;
    
    declare @type: LoanRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.LOAN_NO = "loanNo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.HPRM_FILE_NUMBER = "hprmFileNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.LOAN_TYPE = "loanType";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.REASON_FOR_LOAN = "reasonForLoan";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.START_DATE = "startDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.END_DATE = "endDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.LOAN_FEES = "loanFees";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.SFR_RECEIVED = "sfrReceived";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.OTHER_LOAN_INFO = "otherLoanInfo";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.LOAN_CONTACT = "loanContact";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String LoanRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QLoan loan = QLoan.loan;
        
        JPQLQuery<Loan> query = from(loan);
        
        Path<?>[] paths = new Path<?>[] {loan.loanNo,loan.hprmFileNumber,loan.loanType,loan.reasonForLoan,loan.startDate,loan.endDate,loan.loanFees,loan.sfrReceived,loan.otherLoanInfo,loan.loanContact,loan.createdDate,loan.createdBy,loan.modifiedDate,loan.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LOAN_NO, loan.loanNo)
			.map(HPRM_FILE_NUMBER, loan.hprmFileNumber)
			.map(LOAN_TYPE, loan.loanType)
			.map(REASON_FOR_LOAN, loan.reasonForLoan)
			.map(START_DATE, loan.startDate)
			.map(END_DATE, loan.endDate)
			.map(LOAN_FEES, loan.loanFees)
			.map(SFR_RECEIVED, loan.sfrReceived)
			.map(OTHER_LOAN_INFO, loan.otherLoanInfo)
			.map(LOAN_CONTACT, loan.loanContact)
			.map(CREATED_DATE, loan.createdDate)
			.map(CREATED_BY, loan.createdBy)
			.map(MODIFIED_DATE, loan.modifiedDate)
			.map(MODIFIED_BY, loan.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QLoan loan = QLoan.loan;
        
        JPQLQuery<Loan> query = from(loan);
        
        Path<?>[] paths = new Path<?>[] {loan.loanNo,loan.hprmFileNumber,loan.loanType,loan.reasonForLoan,loan.startDate,loan.endDate,loan.loanFees,loan.sfrReceived,loan.otherLoanInfo,loan.loanContact,loan.createdDate,loan.createdBy,loan.modifiedDate,loan.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(loan.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LOAN_NO, loan.loanNo)
			.map(HPRM_FILE_NUMBER, loan.hprmFileNumber)
			.map(LOAN_TYPE, loan.loanType)
			.map(REASON_FOR_LOAN, loan.reasonForLoan)
			.map(START_DATE, loan.startDate)
			.map(END_DATE, loan.endDate)
			.map(LOAN_FEES, loan.loanFees)
			.map(SFR_RECEIVED, loan.sfrReceived)
			.map(OTHER_LOAN_INFO, loan.otherLoanInfo)
			.map(LOAN_CONTACT, loan.loanContact)
			.map(CREATED_DATE, loan.createdDate)
			.map(CREATED_BY, loan.createdBy)
			.map(MODIFIED_DATE, loan.modifiedDate)
			.map(MODIFIED_BY, loan.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanContact
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanRepositoryImpl.findByLoanContact(Contact loanContact, GlobalSearch globalSearch, Pageable pageable) {
        
        QLoan loan = QLoan.loan;
        
        JPQLQuery<Loan> query = from(loan);
        
        Assert.notNull(loanContact, "loanContact is required");
        
        query.where(loan.loanContact.eq(loanContact));
        Path<?>[] paths = new Path<?>[] {loan.loanNo,loan.hprmFileNumber,loan.loanType,loan.reasonForLoan,loan.startDate,loan.endDate,loan.loanFees,loan.sfrReceived,loan.otherLoanInfo,loan.loanContact,loan.createdDate,loan.createdBy,loan.modifiedDate,loan.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(LOAN_NO, loan.loanNo)
			.map(HPRM_FILE_NUMBER, loan.hprmFileNumber)
			.map(LOAN_TYPE, loan.loanType)
			.map(REASON_FOR_LOAN, loan.reasonForLoan)
			.map(START_DATE, loan.startDate)
			.map(END_DATE, loan.endDate)
			.map(LOAN_FEES, loan.loanFees)
			.map(SFR_RECEIVED, loan.sfrReceived)
			.map(OTHER_LOAN_INFO, loan.otherLoanInfo)
			.map(LOAN_CONTACT, loan.loanContact)
			.map(CREATED_DATE, loan.createdDate)
			.map(CREATED_BY, loan.createdBy)
			.map(MODIFIED_DATE, loan.modifiedDate)
			.map(MODIFIED_BY, loan.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, loan);
    }
    
}
