// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.application.web;

import au.gov.nla.expres.application.web.ExhibitionItemsCollectionThymeleafController;
import au.gov.nla.expres.application.web.ExhibitionItemsCollectionThymeleafLinkFactory;
import au.gov.nla.expres.application.web.ExhibitionItemsItemPageOpeningsThymeleafController;
import au.gov.nla.expres.model.ExhibitionItem;
import au.gov.nla.expres.model.PageOpening;
import au.gov.nla.expres.service.api.ExhibitionItemService;
import au.gov.nla.expres.service.api.PageOpeningService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect ExhibitionItemsItemPageOpeningsThymeleafController_Roo_Thymeleaf {
    
    declare @type: ExhibitionItemsItemPageOpeningsThymeleafController: @Controller;
    
    declare @type: ExhibitionItemsItemPageOpeningsThymeleafController: @RequestMapping(value = "/exhibitionitems/{exhibitionItem}/pageOpenings", name = "ExhibitionItemsItemPageOpeningsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource ExhibitionItemsItemPageOpeningsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<ExhibitionItemsCollectionThymeleafController> ExhibitionItemsItemPageOpeningsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService ExhibitionItemsItemPageOpeningsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param exhibitionItemService
     * @param pageOpeningService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public ExhibitionItemsItemPageOpeningsThymeleafController.new(ExhibitionItemService exhibitionItemService, PageOpeningService pageOpeningService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setExhibitionItemService(exhibitionItemService);
        setPageOpeningService(pageOpeningService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(ExhibitionItemsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource ExhibitionItemsItemPageOpeningsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void ExhibitionItemsItemPageOpeningsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<ExhibitionItemsCollectionThymeleafController> ExhibitionItemsItemPageOpeningsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void ExhibitionItemsItemPageOpeningsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<ExhibitionItemsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService ExhibitionItemsItemPageOpeningsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void ExhibitionItemsItemPageOpeningsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return ExhibitionItem
     */
    @ModelAttribute
    public ExhibitionItem ExhibitionItemsItemPageOpeningsThymeleafController.getExhibitionItem(@PathVariable("exhibitionItem") Long id, Locale locale, HttpMethod method) {
        ExhibitionItem exhibitionItem = null;
        if (HttpMethod.PUT.equals(method)) {
            exhibitionItem = exhibitionItemService.findOneForUpdate(id);
        } else {
            exhibitionItem = exhibitionItemService.findOne(id);
        }
        
        if (exhibitionItem == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"ExhibitionItem", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return exhibitionItem;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ExhibitionItemsItemPageOpeningsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("displayStart_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        model.addAttribute("displayEnd_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ExhibitionItemsItemPageOpeningsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<PageOpening>> ExhibitionItemsItemPageOpeningsThymeleafController.datatables(@ModelAttribute ExhibitionItem exhibitionItem, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<PageOpening> pageOpenings = getPageOpeningService().findByExhibitionItem(exhibitionItem, search, pageable);
        long totalPageOpeningsCount = getPageOpeningService().countByExhibitionItem(exhibitionItem);
        ConvertedDatatablesData<PageOpening> data =  new ConvertedDatatablesData<PageOpening>(pageOpenings, totalPageOpeningsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<PageOpening>> ExhibitionItemsItemPageOpeningsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<PageOpening> pageOpenings = getPageOpeningService().findAllByIdsIn(ids, search, pageable);
        long totalPageOpeningsCount = pageOpenings.getTotalElements();
        ConvertedDatatablesData<PageOpening> data =  new ConvertedDatatablesData<PageOpening>(pageOpenings, totalPageOpeningsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView ExhibitionItemsItemPageOpeningsThymeleafController.createForm(@ModelAttribute ExhibitionItem exhibitionItem, Model model) {
        populateForm(model);
        model.addAttribute("pageOpening", new PageOpening());
        return new ModelAndView("exhibitionitems/pageOpenings/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpeningsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPageOpenings", value = "/{pageOpeningsToRemove}")
    @ResponseBody
    public ResponseEntity<?> ExhibitionItemsItemPageOpeningsThymeleafController.removeFromPageOpenings(@ModelAttribute ExhibitionItem exhibitionItem, @PathVariable("pageOpeningsToRemove") Long pageOpeningsToRemove) {
        getExhibitionItemService().removeFromPageOpenings(exhibitionItem,Collections.singleton(pageOpeningsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpeningsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromPageOpeningsBatch", value = "/batch/{pageOpeningsToRemove}")
    @ResponseBody
    public ResponseEntity<?> ExhibitionItemsItemPageOpeningsThymeleafController.removeFromPageOpeningsBatch(@ModelAttribute ExhibitionItem exhibitionItem, @PathVariable("pageOpeningsToRemove") Collection<Long> pageOpeningsToRemove) {
        getExhibitionItemService().removeFromPageOpenings(exhibitionItem, pageOpeningsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItem
     * @param pageOpenings
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView ExhibitionItemsItemPageOpeningsThymeleafController.create(@ModelAttribute ExhibitionItem exhibitionItem, @RequestParam(value = "pageOpeningsIds", required = false) List<Long> pageOpenings, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (pageOpenings != null) {
            for (Iterator<Long> iterator = pageOpenings.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != exhibitionItem.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (pageOpenings != null) {
                exhibitionItem.setPageOpenings(new HashSet<PageOpening>(getPageOpeningService().findAll(pageOpenings)));
            }else{
                exhibitionItem.setPageOpenings(new HashSet<PageOpening>());
            }
            // Reset the version to prevent update
             exhibitionItem.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("exhibitionItem", exhibitionItem);
            model.addAttribute("concurrency", true);
            return new ModelAndView("exhibitionitems/pageOpenings/create");
        }else if(version != exhibitionItem.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("exhibitionItem", exhibitionItem);
            model.addAttribute("concurrency", false);
            return new ModelAndView("exhibitionitems/pageOpenings/create");
        }
        getExhibitionItemService().setPageOpenings(exhibitionItem,pageOpenings);
        return new ModelAndView("redirect:" + getCollectionLink().to(ExhibitionItemsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
