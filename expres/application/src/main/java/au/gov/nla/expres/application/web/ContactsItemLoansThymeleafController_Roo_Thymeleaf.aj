// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.application.web;

import au.gov.nla.expres.application.web.ContactsCollectionThymeleafController;
import au.gov.nla.expres.application.web.ContactsCollectionThymeleafLinkFactory;
import au.gov.nla.expres.application.web.ContactsItemLoansThymeleafController;
import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.Loan;
import au.gov.nla.expres.service.api.ContactService;
import au.gov.nla.expres.service.api.LoanService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect ContactsItemLoansThymeleafController_Roo_Thymeleaf {
    
    declare @type: ContactsItemLoansThymeleafController: @Controller;
    
    declare @type: ContactsItemLoansThymeleafController: @RequestMapping(value = "/contacts/{contact}/loans", name = "ContactsItemLoansThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource ContactsItemLoansThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<ContactsCollectionThymeleafController> ContactsItemLoansThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService ContactsItemLoansThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param contactService
     * @param loanService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public ContactsItemLoansThymeleafController.new(ContactService contactService, LoanService loanService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setContactService(contactService);
        setLoanService(loanService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(ContactsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource ContactsItemLoansThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void ContactsItemLoansThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<ContactsCollectionThymeleafController> ContactsItemLoansThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void ContactsItemLoansThymeleafController.setCollectionLink(MethodLinkBuilderFactory<ContactsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService ContactsItemLoansThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void ContactsItemLoansThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return Contact
     */
    @ModelAttribute
    public Contact ContactsItemLoansThymeleafController.getContact(@PathVariable("contact") Long id, Locale locale, HttpMethod method) {
        Contact contact = null;
        if (HttpMethod.PUT.equals(method)) {
            contact = contactService.findOneForUpdate(id);
        } else {
            contact = contactService.findOne(id);
        }
        
        if (contact == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"Contact", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return contact;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ContactsItemLoansThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
        model.addAttribute("createdDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        model.addAttribute("modifiedDate_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void ContactsItemLoansThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanContact
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Loan>> ContactsItemLoansThymeleafController.datatables(@ModelAttribute Contact loanContact, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Loan> loans = getLoanService().findByLoanContact(loanContact, search, pageable);
        long totalLoansCount = getLoanService().countByLoanContact(loanContact);
        ConvertedDatatablesData<Loan> data =  new ConvertedDatatablesData<Loan>(loans, totalLoansCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<Loan>> ContactsItemLoansThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<Loan> loans = getLoanService().findAllByIdsIn(ids, search, pageable);
        long totalLoansCount = loans.getTotalElements();
        ConvertedDatatablesData<Loan> data =  new ConvertedDatatablesData<Loan>(loans, totalLoansCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView ContactsItemLoansThymeleafController.createForm(@ModelAttribute Contact contact, Model model) {
        populateForm(model);
        model.addAttribute("loan", new Loan());
        return new ModelAndView("contacts/loans/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loansToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromLoans", value = "/{loansToRemove}")
    @ResponseBody
    public ResponseEntity<?> ContactsItemLoansThymeleafController.removeFromLoans(@ModelAttribute Contact contact, @PathVariable("loansToRemove") Long loansToRemove) {
        getContactService().removeFromLoans(contact,Collections.singleton(loansToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loansToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromLoansBatch", value = "/batch/{loansToRemove}")
    @ResponseBody
    public ResponseEntity<?> ContactsItemLoansThymeleafController.removeFromLoansBatch(@ModelAttribute Contact contact, @PathVariable("loansToRemove") Collection<Long> loansToRemove) {
        getContactService().removeFromLoans(contact, loansToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param contact
     * @param loans
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView ContactsItemLoansThymeleafController.create(@ModelAttribute Contact contact, @RequestParam(value = "loansIds", required = false) List<Long> loans, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (loans != null) {
            for (Iterator<Long> iterator = loans.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != contact.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (loans != null) {
                contact.setLoans(new HashSet<Loan>(getLoanService().findAll(loans)));
            }else{
                contact.setLoans(new HashSet<Loan>());
            }
            // Reset the version to prevent update
             contact.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("contact", contact);
            model.addAttribute("concurrency", true);
            return new ModelAndView("contacts/loans/create");
        }else if(version != contact.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("contact", contact);
            model.addAttribute("concurrency", false);
            return new ModelAndView("contacts/loans/create");
        }
        getContactService().setLoans(contact,loans);
        return new ModelAndView("redirect:" + getCollectionLink().to(ContactsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
