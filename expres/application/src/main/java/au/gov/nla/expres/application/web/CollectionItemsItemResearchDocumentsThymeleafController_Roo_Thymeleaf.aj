// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.application.web;

import au.gov.nla.expres.application.web.CollectionItemsCollectionThymeleafController;
import au.gov.nla.expres.application.web.CollectionItemsCollectionThymeleafLinkFactory;
import au.gov.nla.expres.application.web.CollectionItemsItemResearchDocumentsThymeleafController;
import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.ResearchDocument;
import au.gov.nla.expres.service.api.CollectionItemService;
import au.gov.nla.expres.service.api.ResearchDocumentService;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.web.datatables.ConvertedDatatablesData;
import io.springlets.data.web.datatables.Datatables;
import io.springlets.data.web.datatables.DatatablesColumns;
import io.springlets.data.web.datatables.DatatablesPageable;
import io.springlets.web.NotFoundException;
import io.springlets.web.mvc.util.ControllerMethodLinkBuilderFactory;
import io.springlets.web.mvc.util.MethodLinkBuilderFactory;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.ConversionService;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

privileged aspect CollectionItemsItemResearchDocumentsThymeleafController_Roo_Thymeleaf {
    
    declare @type: CollectionItemsItemResearchDocumentsThymeleafController: @Controller;
    
    declare @type: CollectionItemsItemResearchDocumentsThymeleafController: @RequestMapping(value = "/collectionitems/{collectionItem}/researchDocuments", name = "CollectionItemsItemResearchDocumentsThymeleafController", produces = MediaType.TEXT_HTML_VALUE);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MessageSource CollectionItemsItemResearchDocumentsThymeleafController.messageSource;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private MethodLinkBuilderFactory<CollectionItemsCollectionThymeleafController> CollectionItemsItemResearchDocumentsThymeleafController.collectionLink;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ConversionService CollectionItemsItemResearchDocumentsThymeleafController.conversionService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param collectionItemService
     * @param researchDocumentService
     * @param conversionService
     * @param messageSource
     * @param linkBuilder
     */
    @Autowired
    public CollectionItemsItemResearchDocumentsThymeleafController.new(CollectionItemService collectionItemService, ResearchDocumentService researchDocumentService, ConversionService conversionService, MessageSource messageSource, ControllerMethodLinkBuilderFactory linkBuilder) {
        setCollectionItemService(collectionItemService);
        setResearchDocumentService(researchDocumentService);
        setConversionService(conversionService);
        setMessageSource(messageSource);
        setCollectionLink(linkBuilder.of(CollectionItemsCollectionThymeleafController.class));
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return MessageSource
     */
    public MessageSource CollectionItemsItemResearchDocumentsThymeleafController.getMessageSource() {
        return messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param messageSource
     */
    public void CollectionItemsItemResearchDocumentsThymeleafController.setMessageSource(MessageSource messageSource) {
        this.messageSource = messageSource;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return MethodLinkBuilderFactory
     */
    public MethodLinkBuilderFactory<CollectionItemsCollectionThymeleafController> CollectionItemsItemResearchDocumentsThymeleafController.getCollectionLink() {
        return collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionLink
     */
    public void CollectionItemsItemResearchDocumentsThymeleafController.setCollectionLink(MethodLinkBuilderFactory<CollectionItemsCollectionThymeleafController> collectionLink) {
        this.collectionLink = collectionLink;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ConversionService
     */
    public ConversionService CollectionItemsItemResearchDocumentsThymeleafController.getConversionService() {
        return conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param conversionService
     */
    public void CollectionItemsItemResearchDocumentsThymeleafController.setConversionService(ConversionService conversionService) {
        this.conversionService = conversionService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @param locale
     * @param method
     * @return CollectionItem
     */
    @ModelAttribute
    public CollectionItem CollectionItemsItemResearchDocumentsThymeleafController.getCollectionItem(@PathVariable("collectionItem") Long id, Locale locale, HttpMethod method) {
        CollectionItem collectionItem = null;
        if (HttpMethod.PUT.equals(method)) {
            collectionItem = collectionItemService.findOneForUpdate(id);
        } else {
            collectionItem = collectionItemService.findOne(id);
        }
        
        if (collectionItem == null) {
            String message = messageSource.getMessage("error_NotFound", new Object[] {"CollectionItem", id}, "The record couldn't be found", locale);
            throw new NotFoundException(message);
        }
        return collectionItem;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CollectionItemsItemResearchDocumentsThymeleafController.populateFormats(Model model) {
        model.addAttribute("application_locale", LocaleContextHolder.getLocale().getLanguage());
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param model
     */
    public void CollectionItemsItemResearchDocumentsThymeleafController.populateForm(Model model) {
        populateFormats(model);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rdItem
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatables", produces = Datatables.MEDIA_TYPE, value = "/dt")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ResearchDocument>> CollectionItemsItemResearchDocumentsThymeleafController.datatables(@ModelAttribute CollectionItem rdItem, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ResearchDocument> researchDocuments = getResearchDocumentService().findByRdItem(rdItem, search, pageable);
        long totalResearchDocumentsCount = getResearchDocumentService().countByRdItem(rdItem);
        ConvertedDatatablesData<ResearchDocument> data =  new ConvertedDatatablesData<ResearchDocument>(researchDocuments, totalResearchDocumentsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param datatablesColumns
     * @param search
     * @param pageable
     * @param draw
     * @return ResponseEntity
     */
    @GetMapping(name = "datatablesByIdsIn", produces = Datatables.MEDIA_TYPE, value = "/dtByIdsIn")
    @ResponseBody
    public ResponseEntity<ConvertedDatatablesData<ResearchDocument>> CollectionItemsItemResearchDocumentsThymeleafController.datatablesByIdsIn(@RequestParam("ids") List<Long> ids, DatatablesColumns datatablesColumns, GlobalSearch search, DatatablesPageable pageable, @RequestParam("draw") Integer draw) {
        
        Page<ResearchDocument> researchDocuments = getResearchDocumentService().findAllByIdsIn(ids, search, pageable);
        long totalResearchDocumentsCount = researchDocuments.getTotalElements();
        ConvertedDatatablesData<ResearchDocument> data =  new ConvertedDatatablesData<ResearchDocument>(researchDocuments, totalResearchDocumentsCount, draw, getConversionService(), datatablesColumns);
        return ResponseEntity.ok(data);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionItem
     * @param model
     * @return ModelAndView
     */
    @GetMapping(value = "/create-form", name = "createForm")
    public ModelAndView CollectionItemsItemResearchDocumentsThymeleafController.createForm(@ModelAttribute CollectionItem collectionItem, Model model) {
        populateForm(model);
        model.addAttribute("researchDocument", new ResearchDocument());
        return new ModelAndView("collectionitems/researchDocuments/create");
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionItem
     * @param researchDocumentsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromResearchDocuments", value = "/{researchDocumentsToRemove}")
    @ResponseBody
    public ResponseEntity<?> CollectionItemsItemResearchDocumentsThymeleafController.removeFromResearchDocuments(@ModelAttribute CollectionItem collectionItem, @PathVariable("researchDocumentsToRemove") Long researchDocumentsToRemove) {
        getCollectionItemService().removeFromResearchDocuments(collectionItem,Collections.singleton(researchDocumentsToRemove));
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionItem
     * @param researchDocumentsToRemove
     * @return ResponseEntity
     */
    @DeleteMapping(name = "removeFromResearchDocumentsBatch", value = "/batch/{researchDocumentsToRemove}")
    @ResponseBody
    public ResponseEntity<?> CollectionItemsItemResearchDocumentsThymeleafController.removeFromResearchDocumentsBatch(@ModelAttribute CollectionItem collectionItem, @PathVariable("researchDocumentsToRemove") Collection<Long> researchDocumentsToRemove) {
        getCollectionItemService().removeFromResearchDocuments(collectionItem, researchDocumentsToRemove);
        return ResponseEntity.ok().build();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param collectionItem
     * @param researchDocuments
     * @param version
     * @param concurrencyControl
     * @param model
     * @return ModelAndView
     */
    @PostMapping(name = "create")
    public ModelAndView CollectionItemsItemResearchDocumentsThymeleafController.create(@ModelAttribute CollectionItem collectionItem, @RequestParam(value = "researchDocumentsIds", required = false) List<Long> researchDocuments, @RequestParam("parentVersion") Integer version, @RequestParam(value = "concurrency", required = false, defaultValue = "") String concurrencyControl, Model model) {
        // Remove empty values
        if (researchDocuments != null) {
            for (Iterator<Long> iterator = researchDocuments.iterator(); iterator.hasNext();) {
                if (iterator.next() == null) {
                    iterator.remove();
                }
            }
        }
        // Concurrency control
        if(version != collectionItem.getVersion() && StringUtils.isEmpty(concurrencyControl)){
            populateForm(model);
            // Obtain the selected books and include them in the author that will be 
            // included in the view
            if (researchDocuments != null) {
                collectionItem.setResearchDocuments(new HashSet<ResearchDocument>(getResearchDocumentService().findAll(researchDocuments)));
            }else{
                collectionItem.setResearchDocuments(new HashSet<ResearchDocument>());
            }
            // Reset the version to prevent update
             collectionItem.setVersion(version);
            // Include the updated element in the model
            model.addAttribute("collectionItem", collectionItem);
            model.addAttribute("concurrency", true);
            return new ModelAndView("collectionitems/researchDocuments/create");
        }else if(version != collectionItem.getVersion() && "discard".equals(concurrencyControl)){
            populateForm(model);
            // Provide the original element from the Database
            model.addAttribute("collectionItem", collectionItem);
            model.addAttribute("concurrency", false);
            return new ModelAndView("collectionitems/researchDocuments/create");
        }
        getCollectionItemService().setResearchDocuments(collectionItem,researchDocuments);
        return new ModelAndView("redirect:" + getCollectionLink().to(CollectionItemsCollectionThymeleafLinkFactory.LIST).toUriString());
    }
    
}
