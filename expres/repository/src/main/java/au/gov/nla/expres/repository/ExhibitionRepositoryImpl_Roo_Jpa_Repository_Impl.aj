// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.Exhibition;
import au.gov.nla.expres.model.QExhibition;
import au.gov.nla.expres.repository.ExhibitionRepositoryCustom;
import au.gov.nla.expres.repository.ExhibitionRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ExhibitionRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ExhibitionRepositoryImpl implements ExhibitionRepositoryCustom;
    
    declare @type: ExhibitionRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.CURATOR = "curator";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.FILE_NUMBER = "fileNumber";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.START_DATE = "startDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.END_DATE = "endDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ExhibitionRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Exhibition> ExhibitionRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QExhibition exhibition = QExhibition.exhibition;
        
        JPQLQuery<Exhibition> query = from(exhibition);
        
        Path<?>[] paths = new Path<?>[] {exhibition.title,exhibition.curator,exhibition.fileNumber,exhibition.startDate,exhibition.endDate,exhibition.createdDate,exhibition.createdBy,exhibition.modifiedDate,exhibition.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, exhibition.title)
			.map(CURATOR, exhibition.curator)
			.map(FILE_NUMBER, exhibition.fileNumber)
			.map(START_DATE, exhibition.startDate)
			.map(END_DATE, exhibition.endDate)
			.map(CREATED_DATE, exhibition.createdDate)
			.map(CREATED_BY, exhibition.createdBy)
			.map(MODIFIED_DATE, exhibition.modifiedDate)
			.map(MODIFIED_BY, exhibition.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Exhibition> ExhibitionRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QExhibition exhibition = QExhibition.exhibition;
        
        JPQLQuery<Exhibition> query = from(exhibition);
        
        Path<?>[] paths = new Path<?>[] {exhibition.title,exhibition.curator,exhibition.fileNumber,exhibition.startDate,exhibition.endDate,exhibition.createdDate,exhibition.createdBy,exhibition.modifiedDate,exhibition.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(exhibition.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TITLE, exhibition.title)
			.map(CURATOR, exhibition.curator)
			.map(FILE_NUMBER, exhibition.fileNumber)
			.map(START_DATE, exhibition.startDate)
			.map(END_DATE, exhibition.endDate)
			.map(CREATED_DATE, exhibition.createdDate)
			.map(CREATED_BY, exhibition.createdBy)
			.map(MODIFIED_DATE, exhibition.modifiedDate)
			.map(MODIFIED_BY, exhibition.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, exhibition);
    }
    
}
