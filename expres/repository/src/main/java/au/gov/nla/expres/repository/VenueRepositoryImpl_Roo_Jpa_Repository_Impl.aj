// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.QVenue;
import au.gov.nla.expres.model.Venue;
import au.gov.nla.expres.repository.VenueRepositoryCustom;
import au.gov.nla.expres.repository.VenueRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect VenueRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: VenueRepositoryImpl implements VenueRepositoryCustom;
    
    declare @type: VenueRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.NAME = "name";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.START_DATE = "startDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.END_DATE = "endDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.VENUE_CONTACT = "venueContact";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String VenueRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QVenue venue = QVenue.venue;
        
        JPQLQuery<Venue> query = from(venue);
        
        Path<?>[] paths = new Path<?>[] {venue.name,venue.startDate,venue.endDate,venue.venueContact,venue.createdDate,venue.createdBy,venue.modifiedDate,venue.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, venue.name)
			.map(START_DATE, venue.startDate)
			.map(END_DATE, venue.endDate)
			.map(VENUE_CONTACT, venue.venueContact)
			.map(CREATED_DATE, venue.createdDate)
			.map(CREATED_BY, venue.createdBy)
			.map(MODIFIED_DATE, venue.modifiedDate)
			.map(MODIFIED_BY, venue.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, venue);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QVenue venue = QVenue.venue;
        
        JPQLQuery<Venue> query = from(venue);
        
        Path<?>[] paths = new Path<?>[] {venue.name,venue.startDate,venue.endDate,venue.venueContact,venue.createdDate,venue.createdBy,venue.modifiedDate,venue.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(venue.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, venue.name)
			.map(START_DATE, venue.startDate)
			.map(END_DATE, venue.endDate)
			.map(VENUE_CONTACT, venue.venueContact)
			.map(CREATED_DATE, venue.createdDate)
			.map(CREATED_BY, venue.createdBy)
			.map(MODIFIED_DATE, venue.modifiedDate)
			.map(MODIFIED_BY, venue.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, venue);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param venueContact
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Venue> VenueRepositoryImpl.findByVenueContact(Contact venueContact, GlobalSearch globalSearch, Pageable pageable) {
        
        QVenue venue = QVenue.venue;
        
        JPQLQuery<Venue> query = from(venue);
        
        Assert.notNull(venueContact, "venueContact is required");
        
        query.where(venue.venueContact.eq(venueContact));
        Path<?>[] paths = new Path<?>[] {venue.name,venue.startDate,venue.endDate,venue.venueContact,venue.createdDate,venue.createdBy,venue.modifiedDate,venue.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(NAME, venue.name)
			.map(START_DATE, venue.startDate)
			.map(END_DATE, venue.endDate)
			.map(VENUE_CONTACT, venue.venueContact)
			.map(CREATED_DATE, venue.createdDate)
			.map(CREATED_BY, venue.createdBy)
			.map(MODIFIED_DATE, venue.modifiedDate)
			.map(MODIFIED_BY, venue.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, venue);
    }
    
}
