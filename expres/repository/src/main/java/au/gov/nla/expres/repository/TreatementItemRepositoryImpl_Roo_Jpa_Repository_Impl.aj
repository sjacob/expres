// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.QTreatementItem;
import au.gov.nla.expres.model.Request;
import au.gov.nla.expres.model.TreatementItem;
import au.gov.nla.expres.repository.TreatementItemRepositoryCustom;
import au.gov.nla.expres.repository.TreatementItemRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect TreatementItemRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: TreatementItemRepositoryImpl implements TreatementItemRepositoryCustom;
    
    declare @type: TreatementItemRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.T_ITEM = "tItem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.PRIORITY = "priority";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.STATUS = "status";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.REQUEST_SCALE = "requestScale";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.TOTAL_TIME_SPENT = "totalTimeSpent";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.AT_RISK = "atRisk";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.TREATMENT_SCHEDULE = "treatmentSchedule";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.NEXT_SCHEDULE_DATE = "nextScheduleDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.REQUEST = "request";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String TreatementItemRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TreatementItem> TreatementItemRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QTreatementItem treatementItem = QTreatementItem.treatementItem;
        
        JPQLQuery<TreatementItem> query = from(treatementItem);
        
        Path<?>[] paths = new Path<?>[] {treatementItem.tItem,treatementItem.priority,treatementItem.status,treatementItem.requestScale,treatementItem.totalTimeSpent,treatementItem.atRisk,treatementItem.treatmentSchedule,treatementItem.nextScheduleDate,treatementItem.request,treatementItem.createdDate,treatementItem.createdBy,treatementItem.modifiedDate,treatementItem.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(T_ITEM, treatementItem.tItem)
			.map(PRIORITY, treatementItem.priority)
			.map(STATUS, treatementItem.status)
			.map(REQUEST_SCALE, treatementItem.requestScale)
			.map(TOTAL_TIME_SPENT, treatementItem.totalTimeSpent)
			.map(AT_RISK, treatementItem.atRisk)
			.map(TREATMENT_SCHEDULE, treatementItem.treatmentSchedule)
			.map(NEXT_SCHEDULE_DATE, treatementItem.nextScheduleDate)
			.map(REQUEST, treatementItem.request)
			.map(CREATED_DATE, treatementItem.createdDate)
			.map(CREATED_BY, treatementItem.createdBy)
			.map(MODIFIED_DATE, treatementItem.modifiedDate)
			.map(MODIFIED_BY, treatementItem.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, treatementItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TreatementItem> TreatementItemRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QTreatementItem treatementItem = QTreatementItem.treatementItem;
        
        JPQLQuery<TreatementItem> query = from(treatementItem);
        
        Path<?>[] paths = new Path<?>[] {treatementItem.tItem,treatementItem.priority,treatementItem.status,treatementItem.requestScale,treatementItem.totalTimeSpent,treatementItem.atRisk,treatementItem.treatmentSchedule,treatementItem.nextScheduleDate,treatementItem.request,treatementItem.createdDate,treatementItem.createdBy,treatementItem.modifiedDate,treatementItem.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(treatementItem.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(T_ITEM, treatementItem.tItem)
			.map(PRIORITY, treatementItem.priority)
			.map(STATUS, treatementItem.status)
			.map(REQUEST_SCALE, treatementItem.requestScale)
			.map(TOTAL_TIME_SPENT, treatementItem.totalTimeSpent)
			.map(AT_RISK, treatementItem.atRisk)
			.map(TREATMENT_SCHEDULE, treatementItem.treatmentSchedule)
			.map(NEXT_SCHEDULE_DATE, treatementItem.nextScheduleDate)
			.map(REQUEST, treatementItem.request)
			.map(CREATED_DATE, treatementItem.createdDate)
			.map(CREATED_BY, treatementItem.createdBy)
			.map(MODIFIED_DATE, treatementItem.modifiedDate)
			.map(MODIFIED_BY, treatementItem.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, treatementItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param request
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TreatementItem> TreatementItemRepositoryImpl.findByRequest(Request request, GlobalSearch globalSearch, Pageable pageable) {
        
        QTreatementItem treatementItem = QTreatementItem.treatementItem;
        
        JPQLQuery<TreatementItem> query = from(treatementItem);
        
        Assert.notNull(request, "request is required");
        
        query.where(treatementItem.request.eq(request));
        Path<?>[] paths = new Path<?>[] {treatementItem.tItem,treatementItem.priority,treatementItem.status,treatementItem.requestScale,treatementItem.totalTimeSpent,treatementItem.atRisk,treatementItem.treatmentSchedule,treatementItem.nextScheduleDate,treatementItem.request,treatementItem.createdDate,treatementItem.createdBy,treatementItem.modifiedDate,treatementItem.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(T_ITEM, treatementItem.tItem)
			.map(PRIORITY, treatementItem.priority)
			.map(STATUS, treatementItem.status)
			.map(REQUEST_SCALE, treatementItem.requestScale)
			.map(TOTAL_TIME_SPENT, treatementItem.totalTimeSpent)
			.map(AT_RISK, treatementItem.atRisk)
			.map(TREATMENT_SCHEDULE, treatementItem.treatmentSchedule)
			.map(NEXT_SCHEDULE_DATE, treatementItem.nextScheduleDate)
			.map(REQUEST, treatementItem.request)
			.map(CREATED_DATE, treatementItem.createdDate)
			.map(CREATED_BY, treatementItem.createdBy)
			.map(MODIFIED_DATE, treatementItem.modifiedDate)
			.map(MODIFIED_BY, treatementItem.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, treatementItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param tItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<TreatementItem> TreatementItemRepositoryImpl.findByTItem(CollectionItem tItem, GlobalSearch globalSearch, Pageable pageable) {
        
        QTreatementItem treatementItem = QTreatementItem.treatementItem;
        
        JPQLQuery<TreatementItem> query = from(treatementItem);
        
        Assert.notNull(tItem, "tItem is required");
        
        query.where(treatementItem.tItem.eq(tItem));
        Path<?>[] paths = new Path<?>[] {treatementItem.tItem,treatementItem.priority,treatementItem.status,treatementItem.requestScale,treatementItem.totalTimeSpent,treatementItem.atRisk,treatementItem.treatmentSchedule,treatementItem.nextScheduleDate,treatementItem.request,treatementItem.createdDate,treatementItem.createdBy,treatementItem.modifiedDate,treatementItem.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(T_ITEM, treatementItem.tItem)
			.map(PRIORITY, treatementItem.priority)
			.map(STATUS, treatementItem.status)
			.map(REQUEST_SCALE, treatementItem.requestScale)
			.map(TOTAL_TIME_SPENT, treatementItem.totalTimeSpent)
			.map(AT_RISK, treatementItem.atRisk)
			.map(TREATMENT_SCHEDULE, treatementItem.treatmentSchedule)
			.map(NEXT_SCHEDULE_DATE, treatementItem.nextScheduleDate)
			.map(REQUEST, treatementItem.request)
			.map(CREATED_DATE, treatementItem.createdDate)
			.map(CREATED_BY, treatementItem.createdBy)
			.map(MODIFIED_DATE, treatementItem.modifiedDate)
			.map(MODIFIED_BY, treatementItem.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, treatementItem);
    }
    
}
