// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.DigitalObject;
import au.gov.nla.expres.model.QDigitalObject;
import au.gov.nla.expres.repository.DigitalObjectRepositoryCustom;
import au.gov.nla.expres.repository.DigitalObjectRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect DigitalObjectRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: DigitalObjectRepositoryImpl implements DigitalObjectRepositoryCustom;
    
    declare @type: DigitalObjectRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.DO_ITEM = "doItem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.CAPTION = "caption";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.FILENAME = "filename";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.FORMAT = "format";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.REFERENCE_URL = "referenceUrl";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String DigitalObjectRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DigitalObject> DigitalObjectRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QDigitalObject digitalObject = QDigitalObject.digitalObject;
        
        JPQLQuery<DigitalObject> query = from(digitalObject);
        
        Path<?>[] paths = new Path<?>[] {digitalObject.doItem,digitalObject.caption,digitalObject.filename,digitalObject.format,digitalObject.referenceUrl,digitalObject.createdDate,digitalObject.createdBy,digitalObject.modifiedDate,digitalObject.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DO_ITEM, digitalObject.doItem)
			.map(CAPTION, digitalObject.caption)
			.map(FILENAME, digitalObject.filename)
			.map(FORMAT, digitalObject.format)
			.map(REFERENCE_URL, digitalObject.referenceUrl)
			.map(CREATED_DATE, digitalObject.createdDate)
			.map(CREATED_BY, digitalObject.createdBy)
			.map(MODIFIED_DATE, digitalObject.modifiedDate)
			.map(MODIFIED_BY, digitalObject.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, digitalObject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DigitalObject> DigitalObjectRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QDigitalObject digitalObject = QDigitalObject.digitalObject;
        
        JPQLQuery<DigitalObject> query = from(digitalObject);
        
        Path<?>[] paths = new Path<?>[] {digitalObject.doItem,digitalObject.caption,digitalObject.filename,digitalObject.format,digitalObject.referenceUrl,digitalObject.createdDate,digitalObject.createdBy,digitalObject.modifiedDate,digitalObject.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(digitalObject.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DO_ITEM, digitalObject.doItem)
			.map(CAPTION, digitalObject.caption)
			.map(FILENAME, digitalObject.filename)
			.map(FORMAT, digitalObject.format)
			.map(REFERENCE_URL, digitalObject.referenceUrl)
			.map(CREATED_DATE, digitalObject.createdDate)
			.map(CREATED_BY, digitalObject.createdBy)
			.map(MODIFIED_DATE, digitalObject.modifiedDate)
			.map(MODIFIED_BY, digitalObject.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, digitalObject);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param doItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<DigitalObject> DigitalObjectRepositoryImpl.findByDoItem(CollectionItem doItem, GlobalSearch globalSearch, Pageable pageable) {
        
        QDigitalObject digitalObject = QDigitalObject.digitalObject;
        
        JPQLQuery<DigitalObject> query = from(digitalObject);
        
        Assert.notNull(doItem, "doItem is required");
        
        query.where(digitalObject.doItem.eq(doItem));
        Path<?>[] paths = new Path<?>[] {digitalObject.doItem,digitalObject.caption,digitalObject.filename,digitalObject.format,digitalObject.referenceUrl,digitalObject.createdDate,digitalObject.createdBy,digitalObject.modifiedDate,digitalObject.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(DO_ITEM, digitalObject.doItem)
			.map(CAPTION, digitalObject.caption)
			.map(FILENAME, digitalObject.filename)
			.map(FORMAT, digitalObject.format)
			.map(REFERENCE_URL, digitalObject.referenceUrl)
			.map(CREATED_DATE, digitalObject.createdDate)
			.map(CREATED_BY, digitalObject.createdBy)
			.map(MODIFIED_DATE, digitalObject.modifiedDate)
			.map(MODIFIED_BY, digitalObject.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, digitalObject);
    }
    
}
