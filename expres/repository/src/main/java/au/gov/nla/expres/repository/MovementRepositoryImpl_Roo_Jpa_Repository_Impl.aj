// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.Movement;
import au.gov.nla.expres.model.QMovement;
import au.gov.nla.expres.repository.MovementRepositoryCustom;
import au.gov.nla.expres.repository.MovementRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

privileged aspect MovementRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: MovementRepositoryImpl implements MovementRepositoryCustom;
    
    declare @type: MovementRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.M_ITEM = "mItem";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.PERMANENT_LOCATION = "permanentLocation";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.CURRENT_LOCATION = "currentLocation";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.LOCATION_NOTES = "locationNotes";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.MOVEMENT_NOTES = "movementNotes";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.BARCODE = "barcode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.REQUEST_NUMBER_BARCODE = "requestNumberBarcode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.BARCODE_VALIDATION = "barcodeValidation";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String MovementRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QMovement movement = QMovement.movement;
        
        JPQLQuery<Movement> query = from(movement);
        
        Path<?>[] paths = new Path<?>[] {movement.mItem,movement.permanentLocation,movement.currentLocation,movement.locationNotes,movement.movementNotes,movement.barcode,movement.requestNumberBarcode,movement.barcodeValidation,movement.createdDate,movement.createdBy,movement.modifiedDate,movement.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(M_ITEM, movement.mItem)
			.map(PERMANENT_LOCATION, movement.permanentLocation)
			.map(CURRENT_LOCATION, movement.currentLocation)
			.map(LOCATION_NOTES, movement.locationNotes)
			.map(MOVEMENT_NOTES, movement.movementNotes)
			.map(BARCODE, movement.barcode)
			.map(REQUEST_NUMBER_BARCODE, movement.requestNumberBarcode)
			.map(BARCODE_VALIDATION, movement.barcodeValidation)
			.map(CREATED_DATE, movement.createdDate)
			.map(CREATED_BY, movement.createdBy)
			.map(MODIFIED_DATE, movement.modifiedDate)
			.map(MODIFIED_BY, movement.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movement);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QMovement movement = QMovement.movement;
        
        JPQLQuery<Movement> query = from(movement);
        
        Path<?>[] paths = new Path<?>[] {movement.mItem,movement.permanentLocation,movement.currentLocation,movement.locationNotes,movement.movementNotes,movement.barcode,movement.requestNumberBarcode,movement.barcodeValidation,movement.createdDate,movement.createdBy,movement.modifiedDate,movement.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(movement.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(M_ITEM, movement.mItem)
			.map(PERMANENT_LOCATION, movement.permanentLocation)
			.map(CURRENT_LOCATION, movement.currentLocation)
			.map(LOCATION_NOTES, movement.locationNotes)
			.map(MOVEMENT_NOTES, movement.movementNotes)
			.map(BARCODE, movement.barcode)
			.map(REQUEST_NUMBER_BARCODE, movement.requestNumberBarcode)
			.map(BARCODE_VALIDATION, movement.barcodeValidation)
			.map(CREATED_DATE, movement.createdDate)
			.map(CREATED_BY, movement.createdBy)
			.map(MODIFIED_DATE, movement.modifiedDate)
			.map(MODIFIED_BY, movement.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movement);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param mItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Movement> MovementRepositoryImpl.findByMItem(CollectionItem mItem, GlobalSearch globalSearch, Pageable pageable) {
        
        QMovement movement = QMovement.movement;
        
        JPQLQuery<Movement> query = from(movement);
        
        Assert.notNull(mItem, "mItem is required");
        
        query.where(movement.mItem.eq(mItem));
        Path<?>[] paths = new Path<?>[] {movement.mItem,movement.permanentLocation,movement.currentLocation,movement.locationNotes,movement.movementNotes,movement.barcode,movement.requestNumberBarcode,movement.barcodeValidation,movement.createdDate,movement.createdBy,movement.modifiedDate,movement.modifiedBy};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(M_ITEM, movement.mItem)
			.map(PERMANENT_LOCATION, movement.permanentLocation)
			.map(CURRENT_LOCATION, movement.currentLocation)
			.map(LOCATION_NOTES, movement.locationNotes)
			.map(MOVEMENT_NOTES, movement.movementNotes)
			.map(BARCODE, movement.barcode)
			.map(REQUEST_NUMBER_BARCODE, movement.requestNumberBarcode)
			.map(BARCODE_VALIDATION, movement.barcodeValidation)
			.map(CREATED_DATE, movement.createdDate)
			.map(CREATED_BY, movement.createdBy)
			.map(MODIFIED_DATE, movement.modifiedDate)
			.map(MODIFIED_BY, movement.modifiedBy);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, movement);
    }
    
}
