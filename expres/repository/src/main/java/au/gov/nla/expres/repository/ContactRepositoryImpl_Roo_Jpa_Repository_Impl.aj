// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.repository;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.QContact;
import au.gov.nla.expres.repository.ContactRepositoryCustom;
import au.gov.nla.expres.repository.ContactRepositoryImpl;
import com.querydsl.core.types.Path;
import com.querydsl.jpa.JPQLQuery;
import io.springlets.data.domain.GlobalSearch;
import io.springlets.data.jpa.repository.support.QueryDslRepositorySupportExt.AttributeMappingBuilder;
import java.util.List;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ContactRepositoryImpl_Roo_Jpa_Repository_Impl {
    
    declare parents: ContactRepositoryImpl implements ContactRepositoryCustom;
    
    declare @type: ContactRepositoryImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.TYPE = "type";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.TITLE = "title";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.FIRST_NAME = "firstName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.LAST_NAME = "lastName";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.ADDRESS = "address";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.SUBURB = "suburb";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.ADDRESS_STATE = "addressState";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.COUNTRY = "country";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.POSTCODE = "postcode";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.EMAIL = "email";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.FAX = "fax";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.HOME_PHONE = "homePhone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.WORK_PHONE = "workPhone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.MOBILE_PHONE = "mobilePhone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.OTHER_PHONE = "otherPhone";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.CONTACT_ROLE = "contactRole";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.CONTACT_POSITION = "contactPosition";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.COMMENTS = "comments";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.MODIFIED_BY = "modifiedBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.CREATED_DATE = "createdDate";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.CREATED_BY = "createdBy";
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    public static final String ContactRepositoryImpl.MODIFIED_DATE = "modifiedDate";
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contact> ContactRepositoryImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        
        QContact contact = QContact.contact;
        
        JPQLQuery<Contact> query = from(contact);
        
        Path<?>[] paths = new Path<?>[] {contact.type,contact.title,contact.firstName,contact.lastName,contact.address,contact.suburb,contact.addressState,contact.country,contact.postcode,contact.email,contact.fax,contact.homePhone,contact.workPhone,contact.mobilePhone,contact.otherPhone,contact.contactRole,contact.contactPosition,contact.comments,contact.modifiedBy,contact.createdDate,contact.createdBy,contact.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TYPE, contact.type)
			.map(TITLE, contact.title)
			.map(FIRST_NAME, contact.firstName)
			.map(LAST_NAME, contact.lastName)
			.map(ADDRESS, contact.address)
			.map(SUBURB, contact.suburb)
			.map(ADDRESS_STATE, contact.addressState)
			.map(COUNTRY, contact.country)
			.map(POSTCODE, contact.postcode)
			.map(EMAIL, contact.email)
			.map(FAX, contact.fax)
			.map(HOME_PHONE, contact.homePhone)
			.map(WORK_PHONE, contact.workPhone)
			.map(MOBILE_PHONE, contact.mobilePhone)
			.map(OTHER_PHONE, contact.otherPhone)
			.map(CONTACT_ROLE, contact.contactRole)
			.map(CONTACT_POSITION, contact.contactPosition)
			.map(COMMENTS, contact.comments)
			.map(MODIFIED_BY, contact.modifiedBy)
			.map(CREATED_DATE, contact.createdDate)
			.map(CREATED_BY, contact.createdBy)
			.map(MODIFIED_DATE, contact.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Contact> ContactRepositoryImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        
        QContact contact = QContact.contact;
        
        JPQLQuery<Contact> query = from(contact);
        
        Path<?>[] paths = new Path<?>[] {contact.type,contact.title,contact.firstName,contact.lastName,contact.address,contact.suburb,contact.addressState,contact.country,contact.postcode,contact.email,contact.fax,contact.homePhone,contact.workPhone,contact.mobilePhone,contact.otherPhone,contact.contactRole,contact.contactPosition,contact.comments,contact.modifiedBy,contact.createdDate,contact.createdBy,contact.modifiedDate};        
        applyGlobalSearch(globalSearch, query, paths);
        
        // Also, filter by the provided ids
        query.where(contact.id.in(ids));
        
        AttributeMappingBuilder mapping = buildMapper()
			.map(TYPE, contact.type)
			.map(TITLE, contact.title)
			.map(FIRST_NAME, contact.firstName)
			.map(LAST_NAME, contact.lastName)
			.map(ADDRESS, contact.address)
			.map(SUBURB, contact.suburb)
			.map(ADDRESS_STATE, contact.addressState)
			.map(COUNTRY, contact.country)
			.map(POSTCODE, contact.postcode)
			.map(EMAIL, contact.email)
			.map(FAX, contact.fax)
			.map(HOME_PHONE, contact.homePhone)
			.map(WORK_PHONE, contact.workPhone)
			.map(MOBILE_PHONE, contact.mobilePhone)
			.map(OTHER_PHONE, contact.otherPhone)
			.map(CONTACT_ROLE, contact.contactRole)
			.map(CONTACT_POSITION, contact.contactPosition)
			.map(COMMENTS, contact.comments)
			.map(MODIFIED_BY, contact.modifiedBy)
			.map(CREATED_DATE, contact.createdDate)
			.map(CREATED_BY, contact.createdBy)
			.map(MODIFIED_DATE, contact.modifiedDate);
        
        applyPagination(pageable, query, mapping);
        applyOrderById(query);
        
        return loadPage(query, pageable, contact);
    }
    
}
