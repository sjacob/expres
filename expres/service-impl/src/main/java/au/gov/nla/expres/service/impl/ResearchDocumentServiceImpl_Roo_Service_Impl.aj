// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.CollectionItem;
import au.gov.nla.expres.model.Exhibition;
import au.gov.nla.expres.model.ResearchDocument;
import au.gov.nla.expres.repository.ResearchDocumentRepository;
import au.gov.nla.expres.service.impl.ResearchDocumentServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ResearchDocumentServiceImpl_Roo_Service_Impl {
    
    declare @type: ResearchDocumentServiceImpl: @Service;
    
    declare @type: ResearchDocumentServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ResearchDocumentRepository ResearchDocumentServiceImpl.researchDocumentRepository;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param researchDocumentRepository
     */
    @Autowired
    public ResearchDocumentServiceImpl.new(ResearchDocumentRepository researchDocumentRepository) {
        setResearchDocumentRepository(researchDocumentRepository);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ResearchDocumentRepository
     */
    public ResearchDocumentRepository ResearchDocumentServiceImpl.getResearchDocumentRepository() {
        return researchDocumentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param researchDocumentRepository
     */
    public void ResearchDocumentServiceImpl.setResearchDocumentRepository(ResearchDocumentRepository researchDocumentRepository) {
        this.researchDocumentRepository = researchDocumentRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param researchDocument
     */
    @Transactional
    public void ResearchDocumentServiceImpl.delete(ResearchDocument researchDocument) {
        // Clear bidirectional many-to-one child relationship with Exhibition
        if (researchDocument.getExhibition() != null) {
            researchDocument.getExhibition().getResearchDocuments().remove(researchDocument);
        }
        
        // Clear bidirectional many-to-one child relationship with CollectionItem
        if (researchDocument.getRdItem() != null) {
            researchDocument.getRdItem().getResearchDocuments().remove(researchDocument);
        }
        
        getResearchDocumentRepository().delete(researchDocument);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<ResearchDocument> ResearchDocumentServiceImpl.save(Iterable<ResearchDocument> entities) {
        return getResearchDocumentRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ResearchDocumentServiceImpl.delete(Iterable<Long> ids) {
        List<ResearchDocument> toDelete = getResearchDocumentRepository().findAll(ids);
        getResearchDocumentRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return ResearchDocument
     */
    @Transactional
    public ResearchDocument ResearchDocumentServiceImpl.save(ResearchDocument entity) {
        return getResearchDocumentRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ResearchDocument
     */
    public ResearchDocument ResearchDocumentServiceImpl.findOne(Long id) {
        return getResearchDocumentRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return ResearchDocument
     */
    public ResearchDocument ResearchDocumentServiceImpl.findOneForUpdate(Long id) {
        return getResearchDocumentRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<ResearchDocument> ResearchDocumentServiceImpl.findAll(Iterable<Long> ids) {
        return getResearchDocumentRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<ResearchDocument> ResearchDocumentServiceImpl.findAll() {
        return getResearchDocumentRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ResearchDocumentServiceImpl.count() {
        return getResearchDocumentRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ResearchDocument> ResearchDocumentServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getResearchDocumentRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ResearchDocument> ResearchDocumentServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getResearchDocumentRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ResearchDocument> ResearchDocumentServiceImpl.findByExhibition(Exhibition exhibition, GlobalSearch globalSearch, Pageable pageable) {
        return getResearchDocumentRepository().findByExhibition(exhibition, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rdItem
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<ResearchDocument> ResearchDocumentServiceImpl.findByRdItem(CollectionItem rdItem, GlobalSearch globalSearch, Pageable pageable) {
        return getResearchDocumentRepository().findByRdItem(rdItem, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @return Long
     */
    public long ResearchDocumentServiceImpl.countByExhibition(Exhibition exhibition) {
        return getResearchDocumentRepository().countByExhibition(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param rdItem
     * @return Long
     */
    public long ResearchDocumentServiceImpl.countByRdItem(CollectionItem rdItem) {
        return getResearchDocumentRepository().countByRdItem(rdItem);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<ResearchDocument> ResearchDocumentServiceImpl.getEntityType() {
        return ResearchDocument.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ResearchDocumentServiceImpl.getIdType() {
        return Long.class;
    }
    
}
