// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.Contact;
import au.gov.nla.expres.model.Loan;
import au.gov.nla.expres.model.LoanItem;
import au.gov.nla.expres.repository.LoanRepository;
import au.gov.nla.expres.service.api.LoanItemService;
import au.gov.nla.expres.service.impl.LoanServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect LoanServiceImpl_Roo_Service_Impl {
    
    declare @type: LoanServiceImpl: @Service;
    
    declare @type: LoanServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LoanRepository LoanServiceImpl.loanRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private LoanItemService LoanServiceImpl.loanItemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param loanRepository
     * @param loanItemService
     */
    @Autowired
    public LoanServiceImpl.new(LoanRepository loanRepository, @Lazy LoanItemService loanItemService) {
        setLoanRepository(loanRepository);
        setLoanItemService(loanItemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return LoanRepository
     */
    public LoanRepository LoanServiceImpl.getLoanRepository() {
        return loanRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanRepository
     */
    public void LoanServiceImpl.setLoanRepository(LoanRepository loanRepository) {
        this.loanRepository = loanRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return LoanItemService
     */
    public LoanItemService LoanServiceImpl.getLoanItemService() {
        return loanItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanItemService
     */
    public void LoanServiceImpl.setLoanItemService(LoanItemService loanItemService) {
        this.loanItemService = loanItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loan
     * @param loanItemsToAdd
     * @return Loan
     */
    @Transactional
    public Loan LoanServiceImpl.addToLoanItems(Loan loan, Iterable<Long> loanItemsToAdd) {
        List<LoanItem> loanItems = getLoanItemService().findAll(loanItemsToAdd);
        loan.addToLoanItems(loanItems);
        return getLoanRepository().save(loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loan
     * @param loanItemsToRemove
     * @return Loan
     */
    @Transactional
    public Loan LoanServiceImpl.removeFromLoanItems(Loan loan, Iterable<Long> loanItemsToRemove) {
        List<LoanItem> loanItems = getLoanItemService().findAll(loanItemsToRemove);
        loan.removeFromLoanItems(loanItems);
        return getLoanRepository().save(loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loan
     * @param loanItems
     * @return Loan
     */
    @Transactional
    public Loan LoanServiceImpl.setLoanItems(Loan loan, Iterable<Long> loanItems) {
        List<LoanItem> items = getLoanItemService().findAll(loanItems);
        Set<LoanItem> currents = loan.getLoanItems();
        Set<LoanItem> toRemove = new HashSet<LoanItem>();
        for (Iterator<LoanItem> iterator = currents.iterator(); iterator.hasNext();) {
            LoanItem nextLoanItem = iterator.next();
            if (items.contains(nextLoanItem)) {
                items.remove(nextLoanItem);
            } else {
                toRemove.add(nextLoanItem);
            }
        }
        loan.removeFromLoanItems(toRemove);
        loan.addToLoanItems(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        loan.setVersion(loan.getVersion() + 1);
        return getLoanRepository().save(loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loan
     */
    @Transactional
    public void LoanServiceImpl.delete(Loan loan) {
        // Clear bidirectional many-to-one child relationship with Contact
        if (loan.getLoanContact() != null) {
            loan.getLoanContact().getLoans().remove(loan);
        }
        
        // Clear bidirectional one-to-many parent relationship with LoanItem
        for (LoanItem item : loan.getLoanItems()) {
            item.setLoan(null);
        }
        
        getLoanRepository().delete(loan);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Loan> LoanServiceImpl.save(Iterable<Loan> entities) {
        return getLoanRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void LoanServiceImpl.delete(Iterable<Long> ids) {
        List<Loan> toDelete = getLoanRepository().findAll(ids);
        getLoanRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Loan
     */
    @Transactional
    public Loan LoanServiceImpl.save(Loan entity) {
        return getLoanRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Loan
     */
    public Loan LoanServiceImpl.findOne(Long id) {
        return getLoanRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Loan
     */
    public Loan LoanServiceImpl.findOneForUpdate(Long id) {
        return getLoanRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Loan> LoanServiceImpl.findAll(Iterable<Long> ids) {
        return getLoanRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Loan> LoanServiceImpl.findAll() {
        return getLoanRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long LoanServiceImpl.count() {
        return getLoanRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getLoanRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getLoanRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanContact
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Loan> LoanServiceImpl.findByLoanContact(Contact loanContact, GlobalSearch globalSearch, Pageable pageable) {
        return getLoanRepository().findByLoanContact(loanContact, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param loanContact
     * @return Long
     */
    public long LoanServiceImpl.countByLoanContact(Contact loanContact) {
        return getLoanRepository().countByLoanContact(loanContact);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Loan> LoanServiceImpl.getEntityType() {
        return Loan.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> LoanServiceImpl.getIdType() {
        return Long.class;
    }
    
}
