// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.Exhibition;
import au.gov.nla.expres.model.ExhibitionItem;
import au.gov.nla.expres.model.ResearchDocument;
import au.gov.nla.expres.repository.ExhibitionRepository;
import au.gov.nla.expres.service.api.ExhibitionItemService;
import au.gov.nla.expres.service.api.ResearchDocumentService;
import au.gov.nla.expres.service.impl.ExhibitionServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ExhibitionServiceImpl_Roo_Service_Impl {
    
    declare @type: ExhibitionServiceImpl: @Service;
    
    declare @type: ExhibitionServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ExhibitionRepository ExhibitionServiceImpl.exhibitionRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ExhibitionItemService ExhibitionServiceImpl.exhibitionItemService;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private ResearchDocumentService ExhibitionServiceImpl.researchDocumentService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param exhibitionRepository
     * @param exhibitionItemService
     * @param researchDocumentService
     */
    @Autowired
    public ExhibitionServiceImpl.new(ExhibitionRepository exhibitionRepository, @Lazy ExhibitionItemService exhibitionItemService, @Lazy ResearchDocumentService researchDocumentService) {
        setExhibitionRepository(exhibitionRepository);
        setExhibitionItemService(exhibitionItemService);
        setResearchDocumentService(researchDocumentService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return ExhibitionRepository
     */
    public ExhibitionRepository ExhibitionServiceImpl.getExhibitionRepository() {
        return exhibitionRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionRepository
     */
    public void ExhibitionServiceImpl.setExhibitionRepository(ExhibitionRepository exhibitionRepository) {
        this.exhibitionRepository = exhibitionRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ExhibitionItemService
     */
    public ExhibitionItemService ExhibitionServiceImpl.getExhibitionItemService() {
        return exhibitionItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibitionItemService
     */
    public void ExhibitionServiceImpl.setExhibitionItemService(ExhibitionItemService exhibitionItemService) {
        this.exhibitionItemService = exhibitionItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return ResearchDocumentService
     */
    public ResearchDocumentService ExhibitionServiceImpl.getResearchDocumentService() {
        return researchDocumentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param researchDocumentService
     */
    public void ExhibitionServiceImpl.setResearchDocumentService(ResearchDocumentService researchDocumentService) {
        this.researchDocumentService = researchDocumentService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param exhibitionItemsToAdd
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.addToExhibitionItems(Exhibition exhibition, Iterable<Long> exhibitionItemsToAdd) {
        List<ExhibitionItem> exhibitionItems = getExhibitionItemService().findAll(exhibitionItemsToAdd);
        exhibition.addToExhibitionItems(exhibitionItems);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param researchDocumentsToAdd
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.addToResearchDocuments(Exhibition exhibition, Iterable<Long> researchDocumentsToAdd) {
        List<ResearchDocument> researchDocuments = getResearchDocumentService().findAll(researchDocumentsToAdd);
        exhibition.addToResearchDocuments(researchDocuments);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param exhibitionItemsToRemove
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.removeFromExhibitionItems(Exhibition exhibition, Iterable<Long> exhibitionItemsToRemove) {
        List<ExhibitionItem> exhibitionItems = getExhibitionItemService().findAll(exhibitionItemsToRemove);
        exhibition.removeFromExhibitionItems(exhibitionItems);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param researchDocumentsToRemove
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.removeFromResearchDocuments(Exhibition exhibition, Iterable<Long> researchDocumentsToRemove) {
        List<ResearchDocument> researchDocuments = getResearchDocumentService().findAll(researchDocumentsToRemove);
        exhibition.removeFromResearchDocuments(researchDocuments);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param exhibitionItems
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.setExhibitionItems(Exhibition exhibition, Iterable<Long> exhibitionItems) {
        List<ExhibitionItem> items = getExhibitionItemService().findAll(exhibitionItems);
        Set<ExhibitionItem> currents = exhibition.getExhibitionItems();
        Set<ExhibitionItem> toRemove = new HashSet<ExhibitionItem>();
        for (Iterator<ExhibitionItem> iterator = currents.iterator(); iterator.hasNext();) {
            ExhibitionItem nextExhibitionItem = iterator.next();
            if (items.contains(nextExhibitionItem)) {
                items.remove(nextExhibitionItem);
            } else {
                toRemove.add(nextExhibitionItem);
            }
        }
        exhibition.removeFromExhibitionItems(toRemove);
        exhibition.addToExhibitionItems(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        exhibition.setVersion(exhibition.getVersion() + 1);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     * @param researchDocuments
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.setResearchDocuments(Exhibition exhibition, Iterable<Long> researchDocuments) {
        List<ResearchDocument> items = getResearchDocumentService().findAll(researchDocuments);
        Set<ResearchDocument> currents = exhibition.getResearchDocuments();
        Set<ResearchDocument> toRemove = new HashSet<ResearchDocument>();
        for (Iterator<ResearchDocument> iterator = currents.iterator(); iterator.hasNext();) {
            ResearchDocument nextResearchDocument = iterator.next();
            if (items.contains(nextResearchDocument)) {
                items.remove(nextResearchDocument);
            } else {
                toRemove.add(nextResearchDocument);
            }
        }
        exhibition.removeFromResearchDocuments(toRemove);
        exhibition.addToResearchDocuments(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        exhibition.setVersion(exhibition.getVersion() + 1);
        return getExhibitionRepository().save(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param exhibition
     */
    @Transactional
    public void ExhibitionServiceImpl.delete(Exhibition exhibition) {
        // Clear bidirectional one-to-many parent relationship with ExhibitionItem
        for (ExhibitionItem item : exhibition.getExhibitionItems()) {
            item.setExhibition(null);
        }
        
        // Clear bidirectional one-to-many parent relationship with ResearchDocument
        for (ResearchDocument item : exhibition.getResearchDocuments()) {
            item.setExhibition(null);
        }
        
        getExhibitionRepository().delete(exhibition);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Exhibition> ExhibitionServiceImpl.save(Iterable<Exhibition> entities) {
        return getExhibitionRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void ExhibitionServiceImpl.delete(Iterable<Long> ids) {
        List<Exhibition> toDelete = getExhibitionRepository().findAll(ids);
        getExhibitionRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Exhibition
     */
    @Transactional
    public Exhibition ExhibitionServiceImpl.save(Exhibition entity) {
        return getExhibitionRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Exhibition
     */
    public Exhibition ExhibitionServiceImpl.findOne(Long id) {
        return getExhibitionRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Exhibition
     */
    public Exhibition ExhibitionServiceImpl.findOneForUpdate(Long id) {
        return getExhibitionRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Exhibition> ExhibitionServiceImpl.findAll(Iterable<Long> ids) {
        return getExhibitionRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Exhibition> ExhibitionServiceImpl.findAll() {
        return getExhibitionRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long ExhibitionServiceImpl.count() {
        return getExhibitionRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Exhibition> ExhibitionServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Exhibition> ExhibitionServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getExhibitionRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param title
     * @param pageable
     * @return Page
     */
    public Page<Exhibition> ExhibitionServiceImpl.findByTitle(String title, Pageable pageable) {
        return getExhibitionRepository().findByTitle(title, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param title
     * @return Long
     */
    public long ExhibitionServiceImpl.countByTitle(String title) {
        return getExhibitionRepository().countByTitle(title);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Exhibition> ExhibitionServiceImpl.getEntityType() {
        return Exhibition.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> ExhibitionServiceImpl.getIdType() {
        return Long.class;
    }
    
}
