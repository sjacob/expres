// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package au.gov.nla.expres.service.impl;

import au.gov.nla.expres.model.Request;
import au.gov.nla.expres.model.TreatementItem;
import au.gov.nla.expres.repository.RequestRepository;
import au.gov.nla.expres.service.api.TreatementItemService;
import au.gov.nla.expres.service.impl.RequestServiceImpl;
import io.springlets.data.domain.GlobalSearch;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

privileged aspect RequestServiceImpl_Roo_Service_Impl {
    
    declare @type: RequestServiceImpl: @Service;
    
    declare @type: RequestServiceImpl: @Transactional(readOnly = true);
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private RequestRepository RequestServiceImpl.requestRepository;
    
    /**
     * TODO Auto-generated attribute documentation
     * 
     */
    private TreatementItemService RequestServiceImpl.treatementItemService;
    
    /**
     * TODO Auto-generated constructor documentation
     * 
     * @param requestRepository
     * @param treatementItemService
     */
    @Autowired
    public RequestServiceImpl.new(RequestRepository requestRepository, @Lazy TreatementItemService treatementItemService) {
        setRequestRepository(requestRepository);
        setTreatementItemService(treatementItemService);
    }

    /**
     * TODO Auto-generated method documentation
     * 
     * @return RequestRepository
     */
    public RequestRepository RequestServiceImpl.getRequestRepository() {
        return requestRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requestRepository
     */
    public void RequestServiceImpl.setRequestRepository(RequestRepository requestRepository) {
        this.requestRepository = requestRepository;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return TreatementItemService
     */
    public TreatementItemService RequestServiceImpl.getTreatementItemService() {
        return treatementItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param treatementItemService
     */
    public void RequestServiceImpl.setTreatementItemService(TreatementItemService treatementItemService) {
        this.treatementItemService = treatementItemService;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param request
     * @param requestItemsToAdd
     * @return Request
     */
    @Transactional
    public Request RequestServiceImpl.addToRequestItems(Request request, Iterable<Long> requestItemsToAdd) {
        List<TreatementItem> requestItems = getTreatementItemService().findAll(requestItemsToAdd);
        request.addToRequestItems(requestItems);
        return getRequestRepository().save(request);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param request
     * @param requestItemsToRemove
     * @return Request
     */
    @Transactional
    public Request RequestServiceImpl.removeFromRequestItems(Request request, Iterable<Long> requestItemsToRemove) {
        List<TreatementItem> requestItems = getTreatementItemService().findAll(requestItemsToRemove);
        request.removeFromRequestItems(requestItems);
        return getRequestRepository().save(request);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param request
     * @param requestItems
     * @return Request
     */
    @Transactional
    public Request RequestServiceImpl.setRequestItems(Request request, Iterable<Long> requestItems) {
        List<TreatementItem> items = getTreatementItemService().findAll(requestItems);
        Set<TreatementItem> currents = request.getRequestItems();
        Set<TreatementItem> toRemove = new HashSet<TreatementItem>();
        for (Iterator<TreatementItem> iterator = currents.iterator(); iterator.hasNext();) {
            TreatementItem nextTreatementItem = iterator.next();
            if (items.contains(nextTreatementItem)) {
                items.remove(nextTreatementItem);
            } else {
                toRemove.add(nextTreatementItem);
            }
        }
        request.removeFromRequestItems(toRemove);
        request.addToRequestItems(items);
        // Force the version update of the parent side to know that the parent has changed
        // because it has new books assigned
        request.setVersion(request.getVersion() + 1);
        return getRequestRepository().save(request);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param request
     */
    @Transactional
    public void RequestServiceImpl.delete(Request request) {
        // Clear bidirectional one-to-many parent relationship with TreatementItem
        for (TreatementItem item : request.getRequestItems()) {
            item.setRequest(null);
        }
        
        getRequestRepository().delete(request);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entities
     * @return List
     */
    @Transactional
    public List<Request> RequestServiceImpl.save(Iterable<Request> entities) {
        return getRequestRepository().save(entities);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     */
    @Transactional
    public void RequestServiceImpl.delete(Iterable<Long> ids) {
        List<Request> toDelete = getRequestRepository().findAll(ids);
        getRequestRepository().deleteInBatch(toDelete);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param entity
     * @return Request
     */
    @Transactional
    public Request RequestServiceImpl.save(Request entity) {
        return getRequestRepository().save(entity);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Request
     */
    public Request RequestServiceImpl.findOne(Long id) {
        return getRequestRepository().findOne(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param id
     * @return Request
     */
    public Request RequestServiceImpl.findOneForUpdate(Long id) {
        return getRequestRepository().findOneDetached(id);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @return List
     */
    public List<Request> RequestServiceImpl.findAll(Iterable<Long> ids) {
        return getRequestRepository().findAll(ids);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return List
     */
    public List<Request> RequestServiceImpl.findAll() {
        return getRequestRepository().findAll();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Long
     */
    public long RequestServiceImpl.count() {
        return getRequestRepository().count();
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Request> RequestServiceImpl.findAll(GlobalSearch globalSearch, Pageable pageable) {
        return getRequestRepository().findAll(globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param ids
     * @param globalSearch
     * @param pageable
     * @return Page
     */
    public Page<Request> RequestServiceImpl.findAllByIdsIn(List<Long> ids, GlobalSearch globalSearch, Pageable pageable) {
        return getRequestRepository().findAllByIdsIn(ids, globalSearch, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requestor
     * @param pageable
     * @return Page
     */
    public Page<Request> RequestServiceImpl.findByRequestor(String requestor, Pageable pageable) {
        return getRequestRepository().findByRequestor(requestor, pageable);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @param requestor
     * @return Long
     */
    public long RequestServiceImpl.countByRequestor(String requestor) {
        return getRequestRepository().countByRequestor(requestor);
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Request> RequestServiceImpl.getEntityType() {
        return Request.class;
    }
    
    /**
     * TODO Auto-generated method documentation
     * 
     * @return Class
     */
    public Class<Long> RequestServiceImpl.getIdType() {
        return Long.class;
    }
    
}
